# Encoding: UTF-8

# https://docs.docker.com/registry/recipes/nginx/#setting-things-up

## Set a variable to help us decide if we need to add the
## 'Docker-Distribution-Api-Version' header.
## The registry always sets this header.
## In the case of nginx performing auth, the header is unset
## since nginx is auth-ing before proxying.
map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
    '' 'registry/2.0';
}

#
# Only log abnormal responses
#
map $status $loggable {
    ~^(200|304|307) 0;
    default 1;
}

#
# AWS ECR Token Cache
#
lua_shared_dict ecr_tokens 10m;

proxy_cache_path   /var/cache/nginx levels=1:2 keys_zone=pxycache:10m max_size=100m inactive=5m use_temp_path=off;

server {
    listen                      8080;
    listen                      8443 ssl http2;
    ssl_certificate             /etc/nginx/ssl/cert.pem;
    ssl_certificate_key         /etc/nginx/ssl/key.pem;
    ssl_session_cache           shared:SSL:2m;
    ssl_session_timeout         10m;
    ssl_session_tickets         off;
    ssl_ecdh_curve              secp384r1;
    ssl_ciphers                 ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers   on;
    ssl_protocols               TLSv1.3 TLSv1.2;

    error_log  stderr  info;

    server_name _;
    # AWS internal resolver
    # resolver 169.254.169.253;
    resolver $RESOLVER valid=30s;
    # resolver local=on;

    access_log logs/access.log json_format if=$loggable;

    location /status {
        access_log off;
        stub_status;
    }

    location / {
        # limit_except GET { deny all; }
        client_max_body_size 0;
        chunked_transfer_encoding on;

        proxy_cache pxycache;
        proxy_cache_valid 15s;
        proxy_cache_revalidate on;
        proxy_cache_lock on;
        # S3 Signed URL's include the method -- need to preserve the request method
        proxy_cache_convert_head off;
        proxy_cache_key $request_method$scheme$proxy_host$request_uri;

        add_header X-Proxy-Cache $upstream_cache_status;

        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_ssl_server_name on;
        proxy_connect_timeout  3s;
        proxy_read_timeout 900;

        ## If $docker_distribution_api_version is empty, the header is not added.
        ## See the map directive above where this variable is defined.
        add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

        # set_by_lua $AWS_ACCOUNT 'return os.getenv("AWS_ACCOUNT")';
        # set_by_lua $AWS_REGION 'return os.getenv("AWS_REGION") or os.getenv("AWS_DEFAULT_REGION")';

        proxy_pass "https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com";

        ## Return the raw signed S3 URLs so we simply use this for auth -- do not rewrite the 301,302,307
        proxy_redirect   off; 

        access_by_lua_file /usr/local/openresty/site/ecr.lua;

        # Capture the AccountID (123456789012)
        # docker pull ecrpxy.local/123456789012/my_image:latest
        location ~ "^/v2/(?<aws_account>\d{12})/(?<aws_ecr_path>.*)" {
            proxy_pass "https://$aws_account.dkr.ecr.${AWS_REGION}.amazonaws.com/v2/$aws_ecr_path$is_args$args";

            # Docker Push 202 response from the registry includes a path assuming you are in an account
            # 202 Accepted
            # Location: /v2/<name>/blobs/uploads/<uuid>
            # Range: bytes=0-<offset>
            # Content-Length: 0
            # Docker-Upload-UUID: <uuid>
            header_filter_by_lua_block {
                local location_header = ngx.header["Location"]
                local pattern = "/v2/(.*/blobs/.*)$"
                if location_header and location_header:match(pattern) then
                    ngx.log(ngx.DEBUG, "Rewriting location header from ", location_header)
                    ngx.header["Location"] = location_header:gsub(pattern, "/v2/" .. ngx.var.aws_account .. "/%1")
                    ngx.log(ngx.DEBUG, "to ", ngx.header["Location"])
                end
            }
        }
    }
}
