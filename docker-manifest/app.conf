# Encoding: UTF-8

# https://docs.docker.com/registry/recipes/nginx/#setting-things-up

## Set a variable to help us decide if we need to add the
## 'Docker-Distribution-Api-Version' header.
## The registry always sets this header.
## In the case of nginx performing auth, the header is unset
## since nginx is auth-ing before proxying.
map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
    '' 'registry/2.0';
}

init_by_lua '
    -- Load Dependencies
    cjson = require "cjson"
';

server {
    listen                      8080;
    listen                      8443 ssl http2;
    ssl_certificate             /etc/nginx/ssl/cert.pem;
    ssl_certificate_key         /etc/nginx/ssl/key.pem;
    ssl_session_cache           shared:SSL:2m;
    ssl_session_timeout         10m;
    ssl_session_tickets         off;
    ssl_ecdh_curve              secp384r1;
    ssl_ciphers                 ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers   on;
    ssl_protocols               TLSv1.3 TLSv1.2;

    error_log  stderr  info;

    server_name _;
    # AWS internal resolver
    # resolver 169.254.169.253;
    resolver $RESOLVER;
    # resolver local=on;

    location /status {
        access_log off;
        stub_status;
    }

    location / {
        limit_except GET { deny all; }

        access_by_lua '
            ngx.header.content_type = "text/plain"

            -- Say time from 1 hour ago
            -- ngx.say(os.date("%Y-%m-%d %H", ngx.time()-3600))

            -- ngx.say(os.getenv("AWS_REGION") or os.getenv("AWS_DEFAULT_REGION"))

            -- Retrieve token if unset or if older than 1 hour (3600 seconds)
            if not tokenTimestamp or (ngx.time() - tokenTimestamp > 3600) then
                local shell = require("resty.shell")
                local ok, stdout, stderr, reason, status = shell.run("/usr/local/bin/ecr-login")

                if ok then
                    ecrToken = stdout
                    tokenTimestamp = ngx.time()
                else
                    ngx.log(ngx.ERR, stderr)
                    ngx.header.content_type = "application/json; charset=utf-8"
                    ngx.status = ngx.HTTP_NOT_FOUND
                    -- Build Docker-Compatible Error Response
                    resp = {
                        errors = {
                            {
                                code = "NAME_UNKNOWN",
                                message = "Proxy server has encountered an error retrieving ECR token."
                            }
                        }
                    }
                    ngx.say(cjson.encode(resp))
                end
            else
                -- DEBUG
                -- ngx.say(ecrToken)
            end

            ngx.req.set_header("Authorization", string.format("Basic %s", ecrToken))
        ';

        ## If $docker_distribution_api_version is empty, the header is not added.
        ## See the map directive above where this variable is defined.
        add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version;

        # set_by_lua $AWS_ACCOUNT 'return os.getenv("AWS_ACCOUNT")';
        # set_by_lua $AWS_REGION 'return os.getenv("AWS_REGION") or os.getenv("AWS_DEFAULT_REGION")';

        proxy_pass "https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com";
        proxy_set_header Host "${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-User $http_authorization;
        proxy_set_header X-Forwarded-Proto "https";
        proxy_pass_header Server;
        proxy_read_timeout 900;
    }
}
